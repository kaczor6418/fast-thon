#!/bin/bash
RED="\033[1;31m"
GREEN="\033[1;32m"
NC="\033[0m"

function remove_last_char_if_not_empty() {
  container=("$@")
  if [[ -n "$container" ]]; then
    container=${container::-1}
  fi
  echo "$container"
}

function create_pattern() {
  files_paths_list=("$@")
  pattern=""
  for file_name in $files_paths_list; do
    pattern="${pattern}${file_name}|"
  done
  pattern=$(remove_last_char_if_not_empty "${pattern[*]}")
  echo "$pattern"
}

function filter_array_with_inverted_regEx() {
  files_paths_list=("$@")
  query=$2
  container=""
  if [[ -z "${query}" ]]; then
    container=$files_paths_list
  else
    for value in $files_paths_list; do
      matched_string=$(echo "$value" | grep -v -E "$query")
      if [[ -n "$matched_string" ]]; then
        container="${container}${value} "
      fi
    done
    container=$(remove_last_char_if_not_empty "${container[*]}")
  fi
  echo "$container"
}

function add_files_to_staged_tree() {
  files_paths=("$@")
  if [[ -n "${files_paths// /}" ]]; then
    git add $files_paths
  fi
}

eslint_autofix_flag=""
prettier_autofix_flag="--check"
ends_with_ts_or_tsx=".*\.tsx?$"
firebase_rules=".*\.rules$"
extension_to_fix_by_prettier="\.json$|\.md$|\.html$"
eslint_exit_code=0
prettier_exit_code=0
firebase_exit_code=0
not_staged_ts_tsx_files=$(git diff --diff-filter=b --name-only | grep -E "$ends_with_ts_or_tsx")
not_staged_files_to_prettyprint=$(git diff --diff-filter=b --name-only | grep -E "$extension_to_fix_by_prettier")
staged_ts_tsx_files=$(git diff --cached --diff-filter=d --name-only | grep -E "$ends_with_ts_or_tsx")
staged_files_to_prettyprint=$(git diff --cached --diff-filter=d --name-only | grep -E "$extension_to_fix_by_prettier")
staged_firebase_rules=$(git diff --cached --diff-filter=d --name-only | grep -E "$firebase_rules")
ts_tsx_filter_regex=$(create_pattern "${not_staged_ts_tsx_files[*]}")
files_to_prettyprint_filter_regex=$(create_pattern "${not_staged_files_to_prettyprint[*]}")
ts_tsx_files_to_add_after_linting=$(filter_array_with_inverted_regEx "${staged_ts_tsx_files[*]}" "${ts_tsx_filter_regex}")
files_to_add_after_prettyprint=$(filter_array_with_inverted_regEx "${staged_files_to_prettyprint[*]}" "${files_to_prettyprint_filter_regex}")

if [ ${#ts_tsx_files_to_add_after_linting} = ${#staged_ts_tsx_files} ]; then
  eslint_autofix_flag="--fix"
fi
if [ ${#files_to_add_after_prettyprint} = ${#staged_files_to_prettyprint} ]; then
  prettier_autofix_flag="--write"
fi
if [[ -n "$staged_ts_tsx_files" ]]; then
  echo "Running ESLint..."
  ./node_modules/.bin/firebase-tools $staged_ts_tsx_files --cache $eslint_autofix_flag
  eslint_exit_code=$?
fi
if [[ -n "$staged_files_to_prettyprint" ]]; then
  echo "Running Prettier..."
  ./node_modules/.bin/prettier $prettier_autofix_flag $staged_files_to_prettyprint
  prettier_exit_code=$?
fi
if [[ -n "$staged_firebase_rules" ]]; then
    echo "Running integration tests..."
    ./node_modules/.bin/jest /test/integration --testEnvironment=node --passWithNoTests --setupFilesAfterEnv ./test/integration/integration-setup.ts
    firebase_exit_code=$?
fi
if [ $eslint_exit_code = 0 ] && [ $prettier_exit_code = 0 ] && [ $firebase_exit_code = 0 ]; then
  add_files_to_staged_tree "${ts_tsx_files_to_add_after_linting[*]} ${files_to_add_after_prettyprint[*]}"
  echo -e "${GREEN} ✔ Committed successfully *^____^* ${NC}"
  exit 0
else
  echo -e "${RED} ❌ Couldn't commit changes dues to above errors ＞﹏＜ ${NC}"
  exit 1
fi
